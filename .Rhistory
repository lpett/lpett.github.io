ypos[i+1]<-ydir
}}
##2##when N & P approach 0
{if((8-xdir)>=7.95 & ((8-ydir)>=7.95 | (8-ydir)==0)){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir+0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##3##when N approaches 8 & P approaches 0
{if((8-xdir)<0.05  & (8-ydir)>=7.95){
r<-runif(1)
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir+0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##4##when N approaches 0 & P approaches 7
{if((8-xdir)>=7.95 & (8-ydir)<0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir-0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
###5#when N approaches 0 & P Doesn't edited
{if((8-xdir)>=7.95 & (8-ydir)>=0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##7##when N Doesn't & P Approaches 7
{if((8-xdir)<7.95 & (8-ydir)<0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir-0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##8##when N Approaches 7 & P Doesn't
{if((8-xdir)<0.05  & (8-ydir)>0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
}
return(cbind(xpos,ypos))
}
nx=sample(0:7, 1); ny=sample(0:7, 1)
#produce results matrix for 49 plots, 49=7x7,
#column 1=starting [N], colum2=starting [P], colum3=ending[N], colum=ending[P]
mymat<-matrix(ncol=4, nrow=49)
#store beginning [N]
mymat[,1]<-expand.grid(seq(1,7,1), seq(1,7,1))[,1]
#store beginning [P]
mymat[,2]<-expand.grid(seq(1,7,1), seq(1,7,1))[,2]
###start here if observed you want to randomize the obersvation
###with priors
#create observed data
obsmat<-matrix(ncol=2, nrow=49)
#drawing
###random [N] from unif distribution, unif hyperparameter
set<-c(runif(n=1,min=0.05, max=7.95),runif(n=1,min=0.05, max=7.95))
minN<-min(set)
maxN<-max(set)
obsmat[,1]<-round(runif(nrow(obsmat), min=minN, max=maxN),2)
###random [P] from unif distribution, unif hyperparmaeter
set<-c(runif(1,0.05, 7.95),runif(1,0.05, 7.95))
minN<-min(set)
maxN<-max(set)
obsmat[,2]<-round(runif(nrow(obsmat), min=minN, max=maxN),2)
obsmat<-data.frame(obsmat)
colnames(obsmat)<-c("obs_N", "obs_P")
#store observed start points, same as null
obsmat$start_N<-expand.grid(seq(1,7,1), seq(1,7,1))[,1]
obsmat$start_P<-expand.grid(seq(1,7,1), seq(1,7,1))[,2]
#####loop over experimental design for starting [N]s & [P]s, one at a time
###to create null distribution from random walk
###1000 steps per walk, 49 walks. 1 per starting NP.
stepList<-list()
for (i in 1:49){
#N is number of steps for each walk, nx and ny are iterated starting points for walks
rw<-RW2D(N=1000, nx=mymat[i,1], ny=mymat[i,2])
#store [N] end
mymat[i,3]<-rw[nrow(rw),1]
#store [P] end
mymat[i,4]<-rw[nrow(rw),2]
stepList[[i]]<-data.frame(rw)
}
#convert walk results to dataframe
results<-data.frame(mymat)
#convert last walk to dataframe for example
rw_res<-data.frame(rw)
#add names to new dataframe
colnames(results)<-c("Start_N", "Start_P", "End_N", "End_P")
results$id<-rownames(results)
results3<-results
colnames(results3)<-c("N", "P", "N", "P", "id")
#stack data, should melt do this?
results3<-rbind(results3[,c(1,2,5)], results3[,c(3,4,5)])
#edit observed matrix for plotting
obsmat$id<-row.names(obsmat)
obsmat3<-obsmat
colnames(obsmat3)<-c("N", "P", "N", "P", "id")
#stack data
obsmat3<-rbind(obsmat3[,c(1,2,5)], obsmat3[,c(3,4,5)])
########plot xy points, start xy & end xy
##############################endN#####EndP
xy<-ggplot(data=results, aes(x=End_N, y=End_P))+
stat_density2d(aes(alpha=..level..),geom="polygon")+  ##show lines between beginning and end points for null
#stat_smooth(data=results3, aes(x=N, y=P, fill=id),method="lm", alpha=.5, color="grey", size=.5)+
##show lines between beginning and end points for observed
#stat_smooth(data=obsmat3, aes(x=N, y=P, fill=id),method="lm", alpha=.5, color="green", size=.5)+
geom_point(color="red")+
#remove legend
theme(legend.position="none")+
##example random walk
#geom_path(data=rw_res, aes(x=xpos, y=ypos))+
xlab("[N]")+
ylab("[P]")+
scale_x_continuous(breaks=seq(0,8),
labels=seq(0,8))+
scale_y_continuous(breaks=seq(0,8),
labels=seq(0,8))+
#starting grid points
geom_point(x=results$Start_N, y=results$Start_P, color="black", alpha=.5)+
#observed N & P
geom_point(x=obsmat$obs_N, y=obsmat$obs_P, color="green", alpha=.5)
###log xy
##geom_point(x=log(results$Start_N), y=log(results$Start_P), color="green", alpha=.5)
######Density plots for N:P ratio
density<-ggplot()+
###density plot for null N:P
geom_density(aes(x=log(results$End_N/results$End_P)), fill="red", colour="transparent", alpha=.8)+
###density plot for observed N:P
geom_density(aes(x=log(obsmat$obs_N/obsmat$obs_P)), fill="green", colour="transparent", alpha=.8)+
xlab("N:P")+
ylab("Density")
##1 dimension plot data processing
#subset Nitrogen Xs with Ys=0
Nit<-data.frame(cbind(mymat[,3], rep(0, length(mymat[,3]))))
##observed
Nito<-data.frame(cbind(obsmat$obs_N, rep(0, nrow(obsmat))))
#subset Phosphorous Xs with Ys=1
Pho<-data.frame(cbind(mymat[,4], rep(1, length(mymat[,4]))))
##observed
Phoo<-data.frame(cbind(obsmat$obs_P, rep(1, nrow(obsmat))))
results1<-cbind(Nit, Pho)
##observed
resultso<-cbind(Nito, Phoo)
colnames(results1)<-c("X", "Y", "X", "Y" )
##observed
colnames(resultso)<-c("X", "Y", "X", "Y" )
results1$ID<-rownames(results1)
##stack
results2<-rbind(results1[,c(1,2,5)], results1[,c(3,4,5)])
##observed
resultso$ID<-rownames(resultso)
##stack
results2o<-rbind(resultso[, c(1,2,5)], resultso[,c(3,4,5)])
#####1d plot
d1<-ggplot(data=results2, aes(x=X, y=Y, fill=ID))+
#connector lines between sites
stat_smooth(method="lm", alpha=.5, color="red", size=.5)+
geom_point(color="red")+
#add observed points
geom_point(x=results2o$X, y=results2o$Y, color="green", alpha=.5)+
#observed lines
geom_line(aes(x=results2o$X, y=results2o$Y), color="green", alpha=.5)+
theme(legend.position="none",
axis.text.y=element_text(colour="white"),
axis.ticks.y=element_line(colour="white"))+
xlab("[N]")+
ylim(0,1)+
ylab("")+
scale_x_continuous(breaks=seq(0,8),
labels=seq(0,8),
sec.axis=sec_axis(~.,
breaks=seq(0,8),
labels=seq(0,8),
name="[P]")
)
#combine XY, density, and d1 plots
multiplot(xy, density, d1,cols=1)
#code modified from featherbox, Dec 02, 2010
#http://r.789695.n4.nabble.com/2D-Random-walk-td3069557.html
#Pett, 1-27,28-2018
# load ggplot2
library(ggplot2)
##multiplot from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
#load multiplot
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
#random walk algorithm, n=number of steps, nx,ny= starting experiment xy
# N is the number of steps
# nx is the starting x of a single point
# ny is the starting y of a single point
RW2D<-function(N, nx, ny)
{
i<-0
#starting [N]
xdir<-nx
#starting [P]
ydir<-ny
#xpos is creating an empty vector
xpos<-vector()
# first position in vector
xpos[1]<-xdir
ypos<-vector()
ypos[1]<-ydir
###n = number of steps on each walk
for (i in 1:N-1)
##for succession of if()s finding situations
#where N and P approach boundaries..
#for example N,P->0 or N,P->8
{
##########
#P#4#7#1##
#H#5#9#8##
#O#2#6#3##
##########
###NITRO##
#
##6##when N Doesn't & P Approaches 0 edited
{if((8-xdir)<7.95 & ((8-ydir)>=7.95 | (8-ydir)==0.05)){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir+0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##9## When neither N or P approach boundary
#adding or substracting by 0.05 won't put
##[P] or [N] step out of bound
#so, 25% chance for any direction
{if((8-xdir)<7.95 &  ((8-ydir)>0.05 |(ydir-0.05)>0.05)){
#draw a real number from a uniform distribution
r<-runif(1)
#what decision do you make?
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##1##when N & P approach
##top right corner of plot
##when 0.05 addtion will put [N] and [P] >7
##then 50% for X to go left or Y to go Down
{if((8-xdir)<0.05 & (8-ydir)<0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir -0.05}
if(r>0.75) {ydir<-ydir-0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##2##when N & P approach 0
{if((8-xdir)>=7.95 & ((8-ydir)>=7.95 | (8-ydir)==0)){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir+0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##3##when N approaches 8 & P approaches 0
{if((8-xdir)<0.05  & (8-ydir)>=7.95){
r<-runif(1)
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir+0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##4##when N approaches 0 & P approaches 7
{if((8-xdir)>=7.95 & (8-ydir)<0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir-0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
###5#when N approaches 0 & P Doesn't edited
{if((8-xdir)>=7.95 & (8-ydir)>=0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir+0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##7##when N Doesn't & P Approaches 7
{if((8-xdir)<7.95 & (8-ydir)<0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir+0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir-0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
##8##when N Approaches 7 & P Doesn't
{if((8-xdir)<0.05  & (8-ydir)>0.05){
r<-runif(1)
if(r<=0.25) {xdir<-xdir-0.05}
if(r>0.25 && r<=0.5) {xdir<-xdir-0.05}
if(r>0.5 && r<=0.75) {ydir<-ydir-0.05}
if(r>0.75) {ydir<-ydir+0.05}
xpos[i+1]<-xdir
ypos[i+1]<-ydir
}}
}
return(cbind(xpos,ypos))
}
nx=sample(0:7, 1); ny=sample(0:7, 1)
#produce results matrix for 49 plots, 49=7x7,
#column 1=starting [N], colum2=starting [P], colum3=ending[N], colum=ending[P]
mymat<-matrix(ncol=4, nrow=49)
#store beginning [N]
mymat[,1]<-expand.grid(seq(1,7,1), seq(1,7,1))[,1]
#store beginning [P]
mymat[,2]<-expand.grid(seq(1,7,1), seq(1,7,1))[,2]
###start here if observed you want to randomize the obersvation
###with priors
#create observed data
obsmat<-matrix(ncol=2, nrow=49)
#drawing
###random [N] from unif distribution, unif hyperparameter
set<-c(runif(n=1,min=0.05, max=7.95),runif(n=1,min=0.05, max=7.95))
minN<-min(set)
maxN<-max(set)
obsmat[,1]<-round(runif(nrow(obsmat), min=minN, max=maxN),2)
###random [P] from unif distribution, unif hyperparmaeter
set<-c(runif(1,0.05, 7.95),runif(1,0.05, 7.95))
minN<-min(set)
maxN<-max(set)
obsmat[,2]<-round(runif(nrow(obsmat), min=minN, max=maxN),2)
obsmat<-data.frame(obsmat)
colnames(obsmat)<-c("obs_N", "obs_P")
#store observed start points, same as null
obsmat$start_N<-expand.grid(seq(1,7,1), seq(1,7,1))[,1]
obsmat$start_P<-expand.grid(seq(1,7,1), seq(1,7,1))[,2]
#####loop over experimental design for starting [N]s & [P]s, one at a time
###to create null distribution from random walk
###1000 steps per walk, 49 walks. 1 per starting NP.
stepList<-list()
for (i in 1:49){
#N is number of steps for each walk, nx and ny are iterated starting points for walks
rw<-RW2D(N=1000, nx=mymat[i,1], ny=mymat[i,2])
#store [N] end
mymat[i,3]<-rw[nrow(rw),1]
#store [P] end
mymat[i,4]<-rw[nrow(rw),2]
stepList[[i]]<-data.frame(rw)
}
#convert walk results to dataframe
results<-data.frame(mymat)
#convert last walk to dataframe for example
rw_res<-data.frame(rw)
#add names to new dataframe
colnames(results)<-c("Start_N", "Start_P", "End_N", "End_P")
results$id<-rownames(results)
results3<-results
colnames(results3)<-c("N", "P", "N", "P", "id")
#stack data, should melt do this?
results3<-rbind(results3[,c(1,2,5)], results3[,c(3,4,5)])
#edit observed matrix for plotting
obsmat$id<-row.names(obsmat)
obsmat3<-obsmat
colnames(obsmat3)<-c("N", "P", "N", "P", "id")
#stack data
obsmat3<-rbind(obsmat3[,c(1,2,5)], obsmat3[,c(3,4,5)])
########plot xy points, start xy & end xy
##############################endN#####EndP
xy<-ggplot(data=results, aes(x=End_N, y=End_P))+
stat_density2d(aes(alpha=..level..),geom="polygon")+  ##show lines between beginning and end points for null
#stat_smooth(data=results3, aes(x=N, y=P, fill=id),method="lm", alpha=.5, color="grey", size=.5)+
##show lines between beginning and end points for observed
#stat_smooth(data=obsmat3, aes(x=N, y=P, fill=id),method="lm", alpha=.5, color="green", size=.5)+
geom_point(color="red")+
#remove legend
theme(legend.position="none")+
##example random walk
#geom_path(data=rw_res, aes(x=xpos, y=ypos))+
xlab("[N]")+
ylab("[P]")+
scale_x_continuous(breaks=seq(0,8),
labels=seq(0,8))+
scale_y_continuous(breaks=seq(0,8),
labels=seq(0,8))+
#starting grid points
geom_point(x=results$Start_N, y=results$Start_P, color="black", alpha=.5)+
#observed N & P
geom_point(x=obsmat$obs_N, y=obsmat$obs_P, color="green", alpha=.5)
###log xy
##geom_point(x=log(results$Start_N), y=log(results$Start_P), color="green", alpha=.5)
######Density plots for N:P ratio
density<-ggplot()+
###density plot for null N:P
geom_density(aes(x=log(results$End_N/results$End_P)), fill="red", colour="transparent", alpha=.8)+
###density plot for observed N:P
geom_density(aes(x=log(obsmat$obs_N/obsmat$obs_P)), fill="green", colour="transparent", alpha=.8)+
xlab("N:P")+
ylab("Density")
##1 dimension plot data processing
#subset Nitrogen Xs with Ys=0
Nit<-data.frame(cbind(mymat[,3], rep(0, length(mymat[,3]))))
##observed
Nito<-data.frame(cbind(obsmat$obs_N, rep(0, nrow(obsmat))))
#subset Phosphorous Xs with Ys=1
Pho<-data.frame(cbind(mymat[,4], rep(1, length(mymat[,4]))))
##observed
Phoo<-data.frame(cbind(obsmat$obs_P, rep(1, nrow(obsmat))))
results1<-cbind(Nit, Pho)
##observed
resultso<-cbind(Nito, Phoo)
colnames(results1)<-c("X", "Y", "X", "Y" )
##observed
colnames(resultso)<-c("X", "Y", "X", "Y" )
results1$ID<-rownames(results1)
##stack
results2<-rbind(results1[,c(1,2,5)], results1[,c(3,4,5)])
##observed
resultso$ID<-rownames(resultso)
##stack
results2o<-rbind(resultso[, c(1,2,5)], resultso[,c(3,4,5)])
#####1d plot
d1<-ggplot(data=results2, aes(x=X, y=Y, fill=ID))+
#connector lines between sites
stat_smooth(method="lm", alpha=.5, color="red", size=.5)+
geom_point(color="red")+
#add observed points
geom_point(x=results2o$X, y=results2o$Y, color="green", alpha=.5)+
#observed lines
geom_line(aes(x=results2o$X, y=results2o$Y), color="green", alpha=.5)+
theme(legend.position="none",
axis.text.y=element_text(colour="white"),
axis.ticks.y=element_line(colour="white"))+
xlab("[N]")+
ylim(0,1)+
ylab("")+
scale_x_continuous(breaks=seq(0,8),
labels=seq(0,8),
sec.axis=sec_axis(~.,
breaks=seq(0,8),
labels=seq(0,8),
name="[P]")
)
#combine XY, density, and d1 plots
multiplot(xy, density, d1,cols=1)
library(patchwork)
install_github"Thomas85/patchwork"
install_github("thomas85/patchwork")
install.packages("devtools")
library("devtools")
install_github("thomas85/patchwork")
library(devtools)
install_github("thomas85/patchwork")
install.packages("githubinstall")
library(githubinstall)
githubinstall("patchwork")
